from flask import Flask, request
import requests
import json
import os
from datetime import date, timedelta
import random
import datetime

print("=== –†–û–ë–û–ß–ò–ô MAIN.PY –ó–ê–í–ê–ù–¢–ê–ñ–£–Ñ–¢–¨–°–Ø ===")

TOKEN = "8076795269:AAG0z1_n31zSeLxk_z-PKJZLv_rv3JR5XHE"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TOKEN}"

app = Flask(__name__)

# === –í—Å—ñ –≤–∞—à—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ ===
if os.path.exists("tasks.json"):
    with open("tasks.json", encoding="utf-8") as f:
        user_tasks = json.load(f)
else:
    user_tasks = {}

def save_tasks():
    with open("tasks.json", "w", encoding="utf-8") as f:
        json.dump(user_tasks, f, ensure_ascii=False)

if os.path.exists("scores.json"):
    with open("scores.json", encoding="utf-8") as f:
        user_scores = json.load(f)
else:
    user_scores = {}

def save_scores():
    with open("scores.json", "w", encoding="utf-8") as f:
        json.dump(user_scores, f, ensure_ascii=False)

if os.path.exists("products.json"):
    with open("products.json", encoding="utf-8") as f:
        products = json.load(f)
else:
    products = [
        {"name": "–ö–Ω–∏–≥–∞", "price": 10},
        {"name": "–ö–∞–≤–∞", "price": 5},
        {"name": "–ö–≤–∏—Ç–æ–∫ —É –∫—ñ–Ω–æ", "price": 20}
    ]
    with open("products.json", "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False)

def save_products():
    with open("products.json", "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False)

if os.path.exists("permatasks.json"):
    with open("permatasks.json", encoding="utf-8") as f:
        permatasks = json.load(f)
else:
    permatasks = [
        {"name": "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä—è–¥–∫—É", "score": 2},
        {"name": "–ü–æ—á–∏—Ç–∞—Ç–∏ –∫–Ω–∏–≥—É", "score": 3},
        {"name": "–ú–µ–¥–∏—Ç–∞—Ü—ñ—è", "score": 1.5}
    ]
    with open("permatasks.json", "w", encoding="utf-8") as f:
        json.dump(permatasks, f, ensure_ascii=False)

def save_permatasks():
    with open("permatasks.json", "w", encoding="utf-8") as f:
        json.dump(permatasks, f, ensure_ascii=False)

if os.path.exists("goals.json"):
    with open("goals.json", encoding="utf-8") as f:
        goals = json.load(f)
else:
    goals = []
    with open("goals.json", "w", encoding="utf-8") as f:
        json.dump(goals, f, ensure_ascii=False)

def save_goals():
    with open("goals.json", "w", encoding="utf-8") as f:
        json.dump(goals, f, ensure_ascii=False)

if os.path.exists("user_stats.json"):
    with open("user_stats.json", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

def save_user_stats():
    with open("user_stats.json", "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False)

if os.path.exists("user_shown_photos.json"):
    with open("user_shown_photos.json", encoding="utf-8") as f:
        user_shown_photos = json.load(f)
else:
    user_shown_photos = {}

def save_user_shown_photos():
    with open("user_shown_photos.json", "w", encoding="utf-8") as f:
        json.dump(user_shown_photos, f, ensure_ascii=False)

# === –í—Å—ñ –≤–∞—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤, –±–æ–Ω—É—Å—ñ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
def calculate_score(time, difficulty, nb, mental, time_weight, difficulty_weight, nb_weight, mental_weight, task_priority):
    sum_weights = time_weight + difficulty_weight + nb_weight + mental_weight
    weighted_average = (
        time_weight * time +
        difficulty_weight * difficulty +
        nb_weight * nb +
        mental_weight * mental
    ) / sum_weights
    score = weighted_average * task_priority
    return score

def get_today_combo(user_id):
    today = str(date.today())
    stats_today = user_stats.setdefault(user_id, {}).setdefault(today, {})
    # –Ø–∫—â–æ –∫–æ–º–±–æ –≤–∂–µ —î –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    if "combo" in stats_today:
        return stats_today["combo"]
    
    # –Ü–Ω–∞–∫—à–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤–µ –∫–æ–º–±–æ
    yesterday = str(date.today() - timedelta(days=1))
    stats_yesterday = user_stats.get(user_id, {}).get(yesterday, {})
    prev_combo = stats_yesterday.get("combo", 1)
    done_yesterday = stats_yesterday.get("done", [])
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—á–æ—Ä–∞ –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ 5+ –∑–∞–≤–¥–∞–Ω—å
    if len(done_yesterday) >= 5:
        new_combo = min(prev_combo + 0.25, 15)  # +0.25 –¥–æ –∫–æ–º–±–æ
    else:
        new_combo = 1  # –°–∫–∏–¥–∞—î–º–æ –¥–æ 1
    stats_today["combo"] = new_combo
    save_user_stats()
    return new_combo

def update_user_stats_on_done(user_id, task_name, score):
    today = str(date.today())
    stats = user_stats.setdefault(user_id, {}).setdefault(today, {})
    stats.setdefault("done", []).append({"name": task_name, "score": score})
    stats["combo"] = get_today_combo(user_id)
    stats["bonus"] = stats.get("bonus", 0)
    
    # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –¥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    combo = stats["combo"]
    earned_score = score * combo
    user_scores[user_id] = user_scores.get(user_id, 0) + earned_score
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
    save_user_stats()
    save_scores()
    
    # –ë–æ–Ω—É—Å –∑–∞ 3 –∑–∞–≤–¥–∞–Ω–Ω—è
    if len(stats["done"]) == 3 and stats["bonus"] == 0:
        user_scores[user_id] = user_scores.get(user_id, 0) + 10
        stats["bonus"] = 10
        save_scores()

def get_daily_report(user_id):
    today = str(date.today())
    stats = user_stats.get(user_id, {}).get(today, {})
    done = stats.get("done", [])
    combo = get_today_combo(user_id)
    bonus = stats.get("bonus", 0)

    report = f"üìÖ {today}:\n"
    report += f"‚úÖ –ó–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ: {len(done)}\n"
    report += f"üî• Combo: x{combo:.2f}\n"
    if bonus:
        report += f"üéØ Bonus: +{bonus:.2f}\n"
    report += "\nüìä –ë–∞–ª–∏ –∑–∞ –¥–µ–Ω—å:\n"
    for item in done:
        report += f"- {item['name']}: {item['score']:.2f}\n"
    total = sum(item['score'] for item in done)
    multiplier = combo
    scores_str = ' + '.join([f"{item['score']:.2f}" for item in done])
    report += f"\nüéØ –°—É–º–∞: ({scores_str}) √ó {multiplier:.2f} = {total * multiplier:.2f}\n"
    if bonus:
        report += f"+ üéØ Daily Quest: +{bonus:.2f}\n"
    final = total * multiplier + bonus
    report += f"\n‚úÖ –§—ñ–Ω–∞–ª: {final:.2f} –±–∞–ª—ñ–≤"
    if final > 0:
        report += f"\n\nüí™ –ó—Ä–æ–±–∏–≤ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 99% —á–æ–ª–æ–≤—ñ–∫—ñ–≤ –∑–∞ –¥–µ–Ω—å!"
    return report

def send_message(chat_id, text, reply_markup=None, parse_mode=None):
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    if parse_mode:
        payload["parse_mode"] = parse_mode
    response = requests.post(url, json=payload)
    return response.json()

def edit_message(chat_id, message_id, text, reply_markup=None, parse_mode=None):
    """–†–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    url = f"{TELEGRAM_API_URL}/editMessageText"
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    if parse_mode:
        payload["parse_mode"] = parse_mode
    response = requests.post(url, json=payload)
    return response.json()

def send_main_menu(chat_id):
    keyboard = [
        [{"text": "–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", "callback_data": "add_task"}],
        [{"text": "–ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è", "callback_data": "my_tasks"}],
        [{"text": "–ü–æ—Å—Ç—ñ–π–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è", "callback_data": "permatasks"}],
        [{"text": "–ë–∞–ª–∞–Ω—Å", "callback_data": "my_score"}],
        [{"text": "–ö—É–ø–∏—Ç–∏", "callback_data": "buy"}],
        [{"text": "–¶—ñ–ª—ñ", "callback_data": "goals"}],
        [{"text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "my_stats"}],
        [{"text": "–ï–∫—Å—Ç—Ä–∞ –±–∞–ª–∏", "callback_data": "extra_score"}]
    ]
    reply_markup = json.dumps({"inline_keyboard": keyboard})
    send_message(chat_id, "–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)

def send_back_button(chat_id, text):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é '–ù–∞–∑–∞–¥'"""
    keyboard = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]
    reply_markup = json.dumps({"inline_keyboard": keyboard})
    send_message(chat_id, text, reply_markup=reply_markup)

pending_extra_score = {}

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    print(f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ webhook –∑–∞–ø–∏—Ç –≤—ñ–¥ Telegram")
    data = request.get_json()
    print(f"üìã –î–∞–Ω—ñ: {data}")
    if "message" in data:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"].get("text", "")
        user_id = str(chat_id)
        if user_id in pending_extra_score and pending_extra_score[user_id]:
            try:
                extra = float(text)
                user_scores[user_id] = user_scores.get(user_id, 0) + extra
                save_scores()
                send_message(chat_id, f"–í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {extra}‚≠êÔ∏è –µ–∫—Å—Ç—Ä–∞ –±–∞–ª—ñ–≤! –í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {user_scores[user_id]:.2f}‚≠êÔ∏è")
                pending_extra_score[user_id] = False
            except ValueError:
                send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        elif text == "/start":
            send_main_menu(chat_id)
        elif text == "/my_score":
            score = user_scores.get(user_id, 0)
            send_message(chat_id, f"–ë–∞–ª–∞–Ω—Å: {score:.2f}‚≠êÔ∏è")
            send_main_menu(chat_id)
        elif text.startswith("/add_task "):
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
            task_text = text[10:]  # –í–∏–¥–∞–ª—è—î–º–æ "/add_task "
            if task_text.strip():
                # –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if user_id not in user_tasks:
                    user_tasks[user_id] = []
                user_tasks[user_id].append(task_text)
                save_tasks()
                send_message(chat_id, f"–ó–∞–≤–¥–∞–Ω–Ω—è '{task_text}' –¥–æ–¥–∞–Ω–æ!")
            else:
                send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –ø—ñ—Å–ª—è /add_task")
        elif text.startswith("/done "):
            # –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ
            task_text = text[6:]  # –í–∏–¥–∞–ª—è—î–º–æ "/done "
            if task_text.strip():
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ (–±–∞–∑–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞ 5 –±–∞–ª—ñ–≤)
                base_score = 5.0
                update_user_stats_on_done(user_id, task_text, base_score)
                send_message(chat_id, f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è '{task_text}' –≤–∏–∫–æ–Ω–∞–Ω–æ! +{base_score:.2f}‚≠êÔ∏è")
            else:
                send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –ø—ñ—Å–ª—è /done")
        else:
            send_main_menu(chat_id)
    elif "callback_query" in data:
        query = data["callback_query"]
        chat_id = query["message"]["chat"]["id"]
        message_id = query["message"]["message_id"]
        user_id = str(chat_id)
        data_value = query["data"]
        
        if data_value == "back_to_menu":
            keyboard = [
                [{"text": "–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", "callback_data": "add_task"}],
                [{"text": "–ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è", "callback_data": "my_tasks"}],
                [{"text": "–ü–æ—Å—Ç—ñ–π–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è", "callback_data": "permatasks"}],
                [{"text": "–ë–∞–ª–∞–Ω—Å", "callback_data": "my_score"}],
                [{"text": "–ö—É–ø–∏—Ç–∏", "callback_data": "buy"}],
                [{"text": "–¶—ñ–ª—ñ", "callback_data": "goals"}],
                [{"text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "my_stats"}],
                [{"text": "–ï–∫—Å—Ç—Ä–∞ –±–∞–ª–∏", "callback_data": "extra_score"}]
            ]
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, "–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)
        elif data_value == "add_task":
            keyboard = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /add_task [—Ç–µ–∫—Å—Ç]", reply_markup=reply_markup)
        elif data_value == "my_score":
            score = user_scores.get(user_id, 0)
            keyboard = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, f"–ë–∞–ª–∞–Ω—Å: {score:.2f}‚≠êÔ∏è", reply_markup=reply_markup)
        elif data_value == "permatasks":
            keyboard = []
            for idx, t in enumerate(permatasks):
                keyboard.append([{
                    "text": f"{t['name']} ({t['score']}‚≠êÔ∏è)",
                    "callback_data": f"do_permatask_{idx}"
                }])
            keyboard.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}])
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, "–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:", reply_markup=reply_markup)
        elif data_value == "my_tasks":
            tasks = user_tasks.get(user_id, [])
            if tasks:
                text = "–í–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n"
                for t in tasks:
                    text += f"- {t}\n"
            else:
                text = "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å."
            keyboard = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, text, reply_markup=reply_markup)
        elif data_value == "buy":
            text = "–ú–∞–≥–∞–∑–∏–Ω:\n"
            for p in products:
                text += f"- {p['name']} ({p['price']}‚≠êÔ∏è)\n"
            keyboard = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, text, reply_markup=reply_markup)
        elif data_value == "goals":
            if goals:
                text = "–í–∞—à—ñ —Ü—ñ–ª—ñ:\n"
                for g in goals:
                    text += f"- {g}\n"
            else:
                text = "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—ñ–ª–µ–π."
            keyboard = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, text, reply_markup=reply_markup)
        elif data_value == "my_stats":
            report = get_daily_report(user_id)
            keyboard = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, report, reply_markup=reply_markup)
        elif data_value == "extra_score":
            pending_extra_score[user_id] = True
            keyboard = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–∫—Å—Ç—Ä–∞ –±–∞–ª—ñ–≤, —è–∫—É —Ö–æ—á–µ—Ç–µ –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏:", reply_markup=reply_markup)
        elif data_value.startswith("do_permatask_"):
            idx = int(data_value.split("_")[-1])
            task = permatasks[idx]
            reward = task["score"]
            user_scores[user_id] = user_scores.get(user_id, 0) + reward
            save_scores()
            update_user_stats_on_done(user_id, task["name"], reward)
            keyboard = [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]
            reply_markup = json.dumps({"inline_keyboard": keyboard})
            edit_message(chat_id, message_id, f"–í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏: {task['name']}! +{reward}‚≠êÔ∏è –¥–æ –±–∞–ª–∞–Ω—Å—É.", reply_markup=reply_markup)
    return "ok"

@app.route("/", methods=["GET"])
def index():
    return "Bot is running!"

@app.route("/test", methods=["GET"])
def test():
    print("=== –¶–ï –¢–û–ß–ù–û –¢–û–ô main.py ===")
    return "Test endpoint works!"

@app.route("/hello", methods=["GET"])
def hello():
    return "Hello endpoint!"

@app.route("/webhook_info", methods=["GET"])
def webhook_info():
    return f"""
    <h1>Telegram Bot Webhook Info</h1>
    <p>Bot Token: {TOKEN[:20]}...</p>
    <p>Webhook URL: https://your-domain.com/{TOKEN}</p>
    <p>Status: Ready to receive updates</p>
    """

@app.route("/reset_balance/<user_id>", methods=["GET"])
def reset_balance(user_id):
    """–°–∫–∏–¥–∞—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ 0"""
    if user_id in user_scores:
        user_scores[user_id] = 0
        save_scores()
        return f"–ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —Å–∫–∏–Ω—É—Ç–æ –¥–æ 0"
    return f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

@app.route("/set_balance/<user_id>/<float:amount>", methods=["GET"])
def set_balance(user_id, amount):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_scores[user_id] = amount
    save_scores()
    return f"–ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {amount}"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
