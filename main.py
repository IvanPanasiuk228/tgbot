from flask import Flask, request
import requests
import json
import os
from datetime import date, timedelta
import random
import datetime

TOKEN = "8076795269:AAG0z1_n31zSeLxk_z-PKJZLv_rv3JR5XHE"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TOKEN}"

app = Flask(__name__)

# === –í—Å—ñ –≤–∞—à—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ ===
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
if os.path.exists("tasks.json"):
    with open("tasks.json", encoding="utf-8") as f:
        user_tasks = json.load(f)
else:
    user_tasks = {}

def save_tasks():
    with open("tasks.json", "w", encoding="utf-8") as f:
        json.dump(user_tasks, f, ensure_ascii=False)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
if os.path.exists("scores.json"):
    with open("scores.json", encoding="utf-8") as f:
        user_scores = json.load(f)
else:
    user_scores = {}

def save_scores():
    with open("scores.json", "w", encoding="utf-8") as f:
        json.dump(user_scores, f, ensure_ascii=False)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤
if os.path.exists("products.json"):
    with open("products.json", encoding="utf-8") as f:
        products = json.load(f)
else:
    products = [
        {"name": "–ö–Ω–∏–≥–∞", "price": 10},
        {"name": "–ö–∞–≤–∞", "price": 5},
        {"name": "–ö–≤–∏—Ç–æ–∫ —É –∫—ñ–Ω–æ", "price": 20}
    ]
    with open("products.json", "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False)

def save_products():
    with open("products.json", "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
if os.path.exists("permatasks.json"):
    with open("permatasks.json", encoding="utf-8") as f:
        permatasks = json.load(f)
else:
    permatasks = [
        {"name": "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞—Ä—è–¥–∫—É", "score": 2},
        {"name": "–ü–æ—á–∏—Ç–∞—Ç–∏ –∫–Ω–∏–≥—É", "score": 3},
        {"name": "–ú–µ–¥–∏—Ç–∞—Ü—ñ—è", "score": 1.5}
    ]
    with open("permatasks.json", "w", encoding="utf-8") as f:
        json.dump(permatasks, f, ensure_ascii=False)

def save_permatasks():
    with open("permatasks.json", "w", encoding="utf-8") as f:
        json.dump(permatasks, f, ensure_ascii=False)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–ª–µ–π
if os.path.exists("goals.json"):
    with open("goals.json", encoding="utf-8") as f:
        goals = json.load(f)
else:
    goals = []
    with open("goals.json", "w", encoding="utf-8") as f:
        json.dump(goals, f, ensure_ascii=False)

def save_goals():
    with open("goals.json", "w", encoding="utf-8") as f:
        json.dump(goals, f, ensure_ascii=False)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
if os.path.exists("user_stats.json"):
    with open("user_stats.json", encoding="utf-8") as f:
        user_stats = json.load(f)
else:
    user_stats = {}

def save_user_stats():
    with open("user_stats.json", "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∫–∞–∑–∞–Ω–∏—Ö —Ñ–æ—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
if os.path.exists("user_shown_photos.json"):
    with open("user_shown_photos.json", encoding="utf-8") as f:
        user_shown_photos = json.load(f)
else:
    user_shown_photos = {}

def save_user_shown_photos():
    with open("user_shown_photos.json", "w", encoding="utf-8") as f:
        json.dump(user_shown_photos, f, ensure_ascii=False)

# === –í—Å—ñ –≤–∞—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤, –±–æ–Ω—É—Å—ñ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
def calculate_score(time, difficulty, nb, mental, time_weight, difficulty_weight, nb_weight, mental_weight, task_priority):
    sum_weights = time_weight + difficulty_weight + nb_weight + mental_weight
    weighted_average = (
        time_weight * time +
        difficulty_weight * difficulty +
        nb_weight * nb +
        mental_weight * mental
    ) / sum_weights
    score = weighted_average * task_priority
    return score

def get_today_combo(user_id):
    today = str(date.today())
    stats_today = user_stats.setdefault(user_id, {}).setdefault(today, {})
    if "combo" in stats_today:
        return stats_today["combo"]
    # –Ø–∫—â–æ combo —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –∑ —É—á–æ—Ä–∞
    yesterday = str(date.today() - timedelta(days=1))
    stats_yesterday = user_stats.get(user_id, {}).get(yesterday, {})
    prev_combo = stats_yesterday.get("combo", 1)
    done_yesterday = stats_yesterday.get("done", [])
    if len(done_yesterday) >= 5:
        new_combo = min(prev_combo + 0.25, 15)
    else:
        new_combo = 1
    stats_today["combo"] = new_combo
    save_user_stats()
    return new_combo

def update_user_stats_on_done(user_id, task_name, score):
    today = str(date.today())
    stats = user_stats.setdefault(user_id, {}).setdefault(today, {})
    stats.setdefault("done", []).append({"name": task_name, "score": score})
    # –û–Ω–æ–≤–ª—é—î–º–æ combo —á–µ—Ä–µ–∑ get_today_combo
    stats["combo"] = get_today_combo(user_id)
    stats["bonus"] = stats.get("bonus", 0)
    save_user_stats()
    if len(stats["done"]) == 3 and stats["bonus"] == 0:
        user_scores[user_id] = user_scores.get(user_id, 0) + 10
        stats["bonus"] = 10
        save_scores()

def get_daily_report(user_id):
    today = str(date.today())
    stats = user_stats.get(user_id, {}).get(today, {})
    done = stats.get("done", [])
    combo = get_today_combo(user_id)
    bonus = stats.get("bonus", 0)

    report = f"üìÖ {today}:\n"
    report += f"‚úÖ –ó–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ: {len(done)}\n"
    report += f"üî• Combo: x{combo:.2f}\n"
    if bonus:
        report += f"üéØ Bonus: +{bonus:.2f}\n"
    report += "\nüìä –ë–∞–ª–∏ –∑–∞ –¥–µ–Ω—å:\n"
    for item in done:
        report += f"- {item['name']}: {item['score']:.2f}\n"
    total = sum(item['score'] for item in done)
    multiplier = combo
    scores_str = ' + '.join([f"{item['score']:.2f}" for item in done])
    report += f"\nüéØ –°—É–º–∞: ({scores_str}) √ó {multiplier:.2f} = {total * multiplier:.2f}\n"
    if bonus:
        report += f"+ üéØ Daily Quest: +{bonus:.2f}\n"
    final = total * multiplier + bonus
    report += f"\n‚úÖ –§—ñ–Ω–∞–ª: {final:.2f} –±–∞–ª—ñ–≤"
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —Å–µ—Ä–µ–¥–Ω—ñ–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ —á–æ–ª–æ–≤—ñ–∫—ñ–≤
    if final > 0:
        report += f"\n\nüí™ –ó—Ä–æ–±–∏–≤ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 99% —á–æ–ª–æ–≤—ñ–∫—ñ–≤ –∑–∞ –¥–µ–Ω—å!"
    
    return report

# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
def send_message(chat_id, text, reply_markup=None, parse_mode=None):
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    if parse_mode:
        payload["parse_mode"] = parse_mode
    requests.post(url, json=payload)

def send_main_menu(chat_id):
    keyboard = [
        [{"text": "–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", "callback_data": "add_task"}],
        [{"text": "–ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è", "callback_data": "my_tasks"}],
        [{"text": "–ü–æ—Å—Ç—ñ–π–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è", "callback_data": "permatasks"}],
        [{"text": "–ë–∞–ª–∞–Ω—Å", "callback_data": "my_score"}],
        [{"text": "–ö—É–ø–∏—Ç–∏", "callback_data": "buy"}],
        [{"text": "–¶—ñ–ª—ñ", "callback_data": "goals"}],
        [{"text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "my_stats"}]
    ]
    reply_markup = json.dumps({"inline_keyboard": keyboard})
    send_message(chat_id, "–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)

# === Webhook endpoint ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    data = request.get_json()
    if "message" in data:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"].get("text", "")
        user_id = str(chat_id)
        # –¢—É—Ç —Ä–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö —ñ —Ç–µ–∫—Å—Ç—É
        if text == "/start":
            send_main_menu(chat_id)
        elif text == "/my_score":
            score = user_scores.get(user_id, 0)
            send_message(chat_id, f"–ë–∞–ª–∞–Ω—Å: {score:.2f}‚≠êÔ∏è")
        # ... (–¥–∞–ª—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –≤—Å—é –ª–æ–≥—ñ–∫—É –∑ handle_message, button_handler, —Ç–æ—â–æ)
        else:
            send_message(chat_id, "–Ø –æ—Ç—Ä–∏–º–∞–≤ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
    elif "callback_query" in data:
        # –¢—É—Ç –ª–æ–≥—ñ–∫–∞ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ (callback_query)
        query = data["callback_query"]
        chat_id = query["message"]["chat"]["id"]
        user_id = str(chat_id)
        data_value = query["data"]
        # –î–∞–ª—ñ —Ä–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è –ø–æ data_value, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
        if data_value == "add_task":
            send_message(chat_id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è:")
        elif data_value == "my_score":
            score = user_scores.get(user_id, 0)
            send_message(chat_id, f"–ë–∞–ª–∞–Ω—Å: {score:.2f}‚≠êÔ∏è")
        # ... —ñ —Ç–∞–∫ –¥–∞–ª—ñ –¥–ª—è —ñ–Ω—à–∏—Ö –∫–Ω–æ–ø–æ–∫
        send_message(chat_id, f"–û–±—Ä–æ–±–ª–µ–Ω–æ callback: {data_value}")
    return "ok"

@app.route("/", methods=["GET"])
def index():
    return "Bot is running!"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
